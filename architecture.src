%include('html_intro.inc')
    <meta name="keywords" content="projects">
    <meta name="description" content="NCCS TechInt group thrust area">
    <title>Technology Integration Group: Computer Architecture</title>
%include('hdbody.inc')

%include('hdrnav.inc')

<!-- ========================================================== -->
%include('content_intro.inc')
<div class="overview">

These projects relate to innovations in computer architecture that aim
to improve performance, reduce variability, and enhance reliability.

</div>
<div class="plinks">
<a href="#Many-Core">Exploiting Many-Core Architectures for End-to-End Science</a> 
| <a href="#OSNoise">Reducing Application Runtime Variability on Jaguar XT5</a> 
</div>

%include('content_close.inc')

<!-- ========================================================== -->
%include('content_intro.inc')
    <h2 id="Many-Core">Exploiting Many-Core Architectures for End-to-End Science</h2>

<p>With the leveling off of processor clockspeeds, chip manufacturers have
increased the number of cores to consume the additional transitors promised by
Moore's Law. As we move towards exascale systems, we may see higher core counts
per node including more cores per socket, more sockets, and add-in boards such
as GP-GPUs and many-core coprocessors connected via PCI Express. As users
initially port their applications to Titan's GP-GPUs, they may not fully utilize
the CPUs leaving them available for functional partitioning.</p>

<p>This effort will explore providing runtime services to applications using a
small subset of cores on a many-core systems. These services may include I/O
buffering, which would allow the application to resume computation more quickly,
or various forms of fine-grain analysis or transformations.</p>

    <p>Contributors: Scott Atchley and Sudharshan Vazhkudai

    <p>Status: On-going

  <p>&nbsp; <a class="right" href="#">Top</a>
%include('content_close.inc')

<!-- ========================================================== -->
%include('content_intro.inc')

   <h2 id="OSNoise">Reducing Application Runtime Variability on
   Jaguar XT5</h2>

<p>
Operating system (OS) noise is defined as interference generated by the
OS that prevents the compute core from performing  useful  work. Compute
node kernel daemons, network interfaces, and other OS related services
are major sources of such interference. This interference on individual
compute cores can vary in duration and frequency and can cause
de-synchronization (jitter) in collective communication tasks and thus
results in variable (degraded) overall parallel application performance.
This behavior is more observable in large-scale applications using
certain types of collective communication primitives, such as
MPI_Allreduce. Our efforts focused towards reducing the
overall effect of OS noise on our large-scale parallel applications. We
performed
tests on the quad-core Jaguar, the Cray XT5 at the Oak
Ridge National Laboratory Leadership Computing Facility (OLCF). At the
time of these tests, Jaguar was a 1.4 PFLOPS supercomputer with 144,000
compute cores and 8 cores per node. The technique we used was to
aggregate and merge all OS noise sources onto a single compute core for
each node.  The scientific application was then run on the remaining
seven cores in each node.  Our results showed that we were able to improve
the MPI_Allreduce performance by two orders of magnitude and to boost
the Parallel Ocean Program (POP) performance over 30% using this
technique.


<p>
Contributors: Dave Dillow, Don Maxwell, Ross Miller, Sarp Oral, Galen
Shipman, and Feiyi Wang, Jeff Becklehimer (Cray), and Jeff Larkin (Cray)

<p>
Status: Completed

  <p>&nbsp; <a class="right" href="#">Top</a>
%include('content_close.inc')
%include('html_close.inc')


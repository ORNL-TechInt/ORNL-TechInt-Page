%include('html_intro.inc')
    <meta name="keywords" content="projects">
    <meta name="description" content="NCCS TechInt group thrust area">
    <title>Technology Integration Group: Networking</title>
%include('hdbody.inc')

%include('hdrnav.inc')

  <div class="box-top"></div>
  <div class="page_content">
    <div class="right cci">
       <a
        href="http://www.olcf.ornl.gov/center-projects/common-communication-interface/"
        target="_">
        <img class="rounded networking" src="cci-logo-text-01.png" alt="CCI Logo"/>
       </a>
    </div>

    <a name="CCI"/>
    <h2>Common Communication Interface (CCI)</h2>
    <p>The CCI project is an open-source communication interface that aims to
    provide a simple and portable API, high performance, scalability for
    the largest deployments, and robustness in the presence of faults. It
    is developed and maintained by a partnership of research, academic,
    and industry members.</p>

    <p>Targeted towards high performance computing (HPC) environments as well
    as large data centers, CCI can provide a common network abstraction
    layer (NAL) for persistent services as well as general interprocess
    communication. In HPC, MPI is the de facto standard for communication
    within a job. Persistent services such as distributed file systems,
    code coupling (e.g. a simulation sending output to an analysis
    application sending its output to a visualization process), health
    monitoring, debugging, and performance monitoring, however, exist
    outside of scheduler jobs or span multiple jobs. In these cases, these
    persistent services tend to use either BSD sockets for portability to
    avoid having to rewrite the applications for each new interconnect or
    they implement their own NAL which takes developer time and effort.
    CCI can simplify support for these persistent services by providing a
    common NAL which minimizes the maintenance and support for these
    services while providing improved performance (i.e. reduced latency
    and increased bandwidth) compared to Sockets.</p>

    <p>We are currently supporting Sockets (UDP and TCP), OpenFabrics Verbs 
    (InfiniBand and RoCE), Cray GNI (Gemini and Aries), Cray Portals 3.3 
    (SeaStar), as well as raw Ethernet (IP-bypass). Visit 
    <a href="http://cci-forum.com/" target="_">CCI Forum</a> for release
    information.</p>

    <p/>Contributors: Scott Atchley
  </div>
  <div class="box-bottom"></div>

%include('content_intro.inc')
    <a name="Terabit"/>
    <h2>An Adaptive End-to-End Approach for Terabit Data Movement Optimization</h2>

    <p>This is the work related to <em>An Adaptive End-to-End Approach for
        Terabit Data Movement Optimization</em> project, the goal of this project 
      is to improve throughput of wide-area data transfer between DOE facilities.
      This work involves serveral areas:</p>
    <ul>
      <li>Optimization of CCI for wide-area networking</li>
      <li>Heterogenous routing of CCI</li>
      <li>Optimization of accesses to parallel file systems</li>
    </ul>

    <p/>Contributors: Scott Atchley, Youngjae Kim
%include('content_close.inc')

%include('content_intro.inc')
    <a name="DStar"/>
    <h2>DStar</h2>
    <p>DStar is a native implementation of CCI embedded in SeaStar
      firmware. By replacing Cray Portals, CCI can achieve a latency
      of about 3 &#956;s compared to around 6 &#956;s when using
      Portals for point-to-point small messages. CCI on DStar can even
      send a 4 KiB message in less than 6 &#956;s.</p>

    <p/>Contributors: David Dillow
%include('content_close.inc')
%include('html_close.inc')
